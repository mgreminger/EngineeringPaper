import { test, expect } from '@playwright/test';
import { cot, pi, sqrt, tan, cos} from 'mathjs';

import { precision, loadPyodide, newSheet, parseLatexFloat } from './utility.mjs';

let page;

// loading pyodide takes a long time (especially in resource constrained CI environments)
// load page once and use for all tests in this file
test.beforeAll(async ({ browser }) => {page = await loadPyodide(browser, page);} );

// give each test a blank sheet to start with (this doesn't reload pyodide)
test.beforeEach(async () => {await newSheet(page)});

test('Unitless function', async () => {
  await page.setLatex(0, String.raw`y=x`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(x=10\right)=`);

  await page.locator('#code-gen-1').click();

  let content = await page.locator('code').textContent();
  
  expect(content).toBe(`def y(x):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' is unitless.

    Returns
    -------
    float
        Return value is unitless.
    """

    result = x

    return result
`);

  await page.keyboard.press('Escape');
});

test('Function with input and output units', async () => {
  await page.setLatex(0, String.raw`y=x`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(x=10\left\lbrack mm\right\rbrack\right)=\left\lbrack mm\right\rbrack`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`def y(x):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' has units of [mm].

    Returns
    -------
    float
        Return value has units of [mm].
    """

    x = x * 0.001

    result = x

    return result / 0.001
`);

  await page.keyboard.press('Escape');
});

test('Function with temperature input and output', async () => {
  await page.setLatex(0, String.raw`y=x`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(x=-40\left\lbrack degF\right\rbrack\right)=\left\lbrack degF\right\rbrack`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`def y(x):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' has units of [degF].

    Returns
    -------
    float
        Return value has units of [degF].
    """

    x = (x + 459.67) * 0.5555555555555556

    result = x

    return (result / 0.5555555555555556) - 459.67
`);

  await page.keyboard.press('Escape');
});

test('Function with temperature input and output, offset only', async () => {
  await page.setLatex(0, String.raw`y=x`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(x=-40\left\lbrack degC\right\rbrack\right)=\left\lbrack degC\right\rbrack`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`def y(x):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' has units of [degC].

    Returns
    -------
    float
        Return value has units of [degC].
    """

    x = x + 273.15

    result = x

    return result - 273.15
`);

  await page.keyboard.press('Escape');
});

test('Funciton with two inputs', async () => {
  await page.setLatex(0, String.raw`y=x\cdot z`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(x=10\left\lbrack m\right\rbrack,\:z=1\left\lbrack sec\right\rbrack\right)=`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`def y(x, z):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' has units of [m].
    z : float
        'z' has units of [sec].

    Returns
    -------
    float
        Return value has units of [m s].
    """

    result = x*z

    return result
`);

  await page.keyboard.press('Escape');
});

test('Function with unitless matrix output', async () => {
  await page.setLatex(0, String.raw`y=\begin{bmatrix}a & b\\ c & d\end{bmatrix}`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(a=1,\:b=2,\:c=3,\:d=4\right)=`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`import numpy

def y(a, b, c, d):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    a : float
        'a' is unitless.
    b : float
        'b' is unitless.
    c : float
        'c' is unitless.
    d : float
        'd' is unitless.

    Returns
    -------
    numpy.array
        Return value is a matrix with units [[unitless, unitless], [unitless, unitless]]
    """

    result = numpy.array([[a, b], [c, d]])

    return result
`);

  await page.keyboard.press('Escape');
});

test('Function with matrix output with units', async () => {
  await page.setLatex(0, String.raw`y=\begin{bmatrix}a & b\\ c & d\end{bmatrix}`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(a=1\left\lbrack mm\right\rbrack,\:b=1\left\lbrack mm^2\right\rbrack,\:c=1\left\lbrack mm^3\right\rbrack,\:d=1\left\lbrack mm^3\right\rbrack\right)=`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`import numpy

def y(a, b, c, d):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    a : float
        'a' has units of [mm].
    b : float
        'b' has units of [mm^2].
    c : float
        'c' has units of [mm^3].
    d : float
        'd' has units of [mm^3].

    Returns
    -------
    numpy.array
        Return value is a matrix with units [[m, m^2], [m^3, m^3]]
    """

    a = a * 0.001
    b = b * 0.000001
    c = c * 1e-9
    d = d * 1e-9

    result = numpy.array([[a, b], [c, d]])

    return result
`);

  await page.keyboard.press('Escape');
});

test('Function with matrix output with units and user units', async () => {
  await page.setLatex(0, String.raw`y=\begin{bmatrix}a & b\\ c & d\end{bmatrix}`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(a=1\left\lbrack in\right\rbrack,\:b=2\left\lbrack in\right\rbrack,\:c=3\left\lbrack in\right\rbrack,\:d=4\left\lbrack in\right\rbrack\right)=\left\lbrack in\right\rbrack`);

  await page.locator('#code-gen-1').click();
  
  let content = await page.locator('code').textContent();

  expect(content).toBe(`import numpy

def y(a, b, c, d):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    a : float
        'a' has units of [in].
    b : float
        'b' has units of [in].
    c : float
        'c' has units of [in].
    d : float
        'd' has units of [in].

    Returns
    -------
    numpy.array
        Return value is a matrix with units [[in, in], [in, in]]
    """

    a = a * 0.0254
    b = b * 0.0254
    c = c * 0.0254
    d = d * 0.0254

    result = numpy.array([[a, b], [c, d]])

    return result / 0.0254
`);

  await page.keyboard.press('Escape');
});

test('Codegen button appears only when appropriate', async () => {
  await page.setLatex(0, String.raw`y=x`);

  await page.locator('#add-math-cell').click()
  
  await page.setLatex(1, String.raw`y=`);
  await page.waitForSelector('text=Updating...', {state: 'detached'});
  await expect(page.locator('#code-gen-1')).toBeHidden();

  await page.setLatex(1, String.raw`y\left(x=z\right)=`);
  await page.waitForSelector('text=Updating...', {state: 'detached'});
  await expect(page.locator('#code-gen-1')).toBeHidden();

  await page.setLatex(1, String.raw`y\left(x=1,s=t\right)=`);
  await page.waitForSelector('text=Updating...', {state: 'detached'});
  await expect(page.locator('#code-gen-1')).toBeHidden();

  await page.setLatex(1, String.raw`y\left(x=1\left\lbrack m\right\rbrack\right)=\left\lbrack sec\right\rbrack`);
  await page.waitForSelector('text=Updating...', {state: 'detached'});
  await expect(page.locator('#code-gen-1')).toBeHidden();

  await page.setLatex(1, String.raw`2\cdot y\left(x=1\right)=`);
  await page.waitForSelector('text=Updating...', {state: 'detached'});
  await expect(page.locator('#code-gen-1')).toBeHidden();

  await page.setLatex(1, String.raw`y\left(x=1\right)=`);
  await page.waitForSelector('text=Updating...', {state: 'detached'});
  await expect(page.locator('#code-gen-1')).toBeVisible();
});

test('Numpy function rewrite fix, sympy #25514', async () => {
  await page.setLatex(0, String.raw`y=\sec\left(x\right)^2`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`y\left(x=1\right)=`);

  await page.locator('#code-gen-1').click();

  let content = await page.locator('code').textContent();
  
  expect(content).toBe(`import numpy

def y(x):
    """
    Function 'y' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' is unitless.

    Returns
    -------
    float
        Return value is unitless.
    """

    result = (numpy.cos(x)**(-1.0))**2

    return result
`);

  await page.keyboard.press('Escape');
});

test('Variable name rewriting', async () => {
  await page.setLatex(0, String.raw`I=Add\cdot\left(x+Add+def\right)`);

  await page.locator('#add-math-cell').click()
  await page.setLatex(1, String.raw`I\left(x=1\left\lbrack mm\right\rbrack,\:Add=2\left\lbrack mm\right\rbrack,\:def=3\left\lbrack mm\right\rbrack\right)=`);

  await page.locator('#code-gen-1').click();

  let content = await page.locator('code').textContent();
  
  expect(content).toBe(`def I(x, Add, def_as_variable):
    """
    Function 'I' automatically generated by EngineeringPaper.xyz

    Parameters
    ----------
    x : float
        'x' has units of [mm].
    Add : float
        'Add' has units of [mm].
    def_as_variable : float
        'def_as_variable' has units of [mm].

    Returns
    -------
    float
        Return value has units of [m^2].
    """

    x = x * 0.001
    Add = Add * 0.001
    def_as_variable = def_as_variable * 0.001

    result = Add*(Add + def_as_variable + x)

    return result
`);

  await page.keyboard.press('Escape');
});

